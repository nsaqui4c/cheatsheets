==============================https://www.interviewbit.com/node-js-interview-questions/=====================

First class function - function can be used as variable and can be passed as to another function.

function can return another function(higher-order function). map() and filter() are higher-order functions that are popularly used.

Node.js is a virtual machine that uses JavaScript as its scripting language and runs Chrome’s V8 JavaScript engine. Basically, Node.js is based on an event-driven architecture where I/O runs asynchronously making it lightweight and efficient. 

package manager- npm or yarn



Why node js is better:
Node.js provides simplicity in development because of its non-blocking I/O and even-based model results in short response time and concurrent processing, unlike other frameworks where developers have to use thread management. 

asynchronous calls usually involve a callback or an event, to signal that the response is available, while in the case of non-blocking the call returns with whatever is available and the caller might have to try again to get the rest of the data.
 
It runs on a chrome v8 engine which is written in c++ and is highly performant with constant improvement. 
 
Also since we will use Javascript in both the frontend and backend the development will be much faster. 
 
And at last, there are ample libraries so that we don’t need to reinvent the wheel.



how “Control Flow” controls the functions calls????????



setTimeout/clearTimeout – This is used to implement delays in code execution. - run funct only after specific time
setInterval/clearInterval – This is used to run a code block multiple times.  - run funct after given millisecond
setImmediate/clearImmediate – This is used to set the execution of the code at the end of the event loop cycle. - put the process at end of queue
process.nextTick – This is used to set the execution of code at the beginning of the next event loop cycle.     - put the process at head of queue - runs immediately



A fork in general is used to spawn child processes. In node it is used to create a new instance of v8 engine to run multiple workers to execute the code.

REPL in Node.js stands for Read, Eval, Print, and Loop, which further means evaluating code on the go.


List down the two arguments that async.queue takes as input?
Task Function
Concurrency Value


module.exports = { getSolutionInJavaScript, getSolutionInPython }
const { getSolutionInJavaScript, getSolutionInPython} = require("./utils")


event-loop in Node JS?


If Node.js is single threaded then how does it handle concurrency?
The main loop is single-threaded and all async calls are managed by libuv library.


Differentiate between process.nextTick() and setImmediate()?
	setImmediate(()=>{console.log('immediately')})   ==> put this at the end of event loop queue
	process.nextTick(()=>{console.log('next')})      ==> put this at head of queue, as soon as current running function finishes, this will start executing


What is node.js streams?
Streams are instances of **EventEmitter** which can be used to work with streaming data in Node.js. They can be used for handling and manipulating streaming large files(videos, mp3, etc) over the network. They use buffers as their temporary storage.

There are mainly four types of the stream:

Writable: streams to which data can be written (for example, fs.createWriteStream()).
Readable: streams from which data can be read (for example, fs.createReadStream()).
Duplex: streams that are both Readable and Writable (for example, net.Socket).
Transform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate()).






What is middleware?
Middleware comes in between your request and business logic. It is mainly used to capture logs and enable rate limit, routing, authentication, basically whatever that is not a part of business logic. There are third-party middleware also such as body-parser and you can write your own middleware for a specific use case.



 Explain what a Reactor Pattern in Node.js?
Reactor pattern again a pattern for nonblocking I/O operations. But in general, this is used in any event-driven architecture. 

There are two components in this: 1. Reactor 2. Handler.

Reactor: Its job is to dispatch the I/O event to appropriate handlers
Handler: Its job is to actually work on those events






For Node.js, why Google uses V8 engine?
Well, are there any other options available? Yes, of course, we have Spidermonkey from Firefox, Chakra from Edge but Google’s v8 is the most evolved(since it’s open-source so there’s a huge community helping in developing features and fixing bugs) and fastest(since it’s written in c++) we got till now as a JavaScript and WebAssembly engine. And it is portable to almost every machine known.






 Describe the exit codes of Node.js?
Exit codes give us an idea of how a process got terminated/the reason behind termination. 

A few of them are:

Uncaught fatal exception - (code - 1) - There has been an exception that is not handled
Unused - (code - 2) - This is reserved by bash
Fatal Error - (code - 5) - There has been an error in V8 with stderr output of the description
Internal Exception handler Run-time failure - (code - 7) - There has been an exception when bootstrapping function was called
Internal JavaScript Evaluation Failure - (code - 4) - There has been an exception when the bootstrapping process failed to return function value when evaluated.





Explain the concept of stub in Node.js?
Stubs are used in writing tests which are an important part of development. It replaces the whole function which is getting tested.  

This helps in scenarios where we need to test:

External calls which make tests slow and difficult to write (e.g HTTP calls/ DB calls)
Triggering different outcomes for a piece of code (e.g. what happens if an error is thrown/ if it passes)






What is an Event Emitter in Node.js?
EventEmitter is a Node.js class that includes all the objects that are basically capable of emitting events. This can be done by attaching named events that are emitted by the object using an eventEmitter.on() function. Thus whenever this object throws an even the attached functions are invoked synchronously.

const EventEmitter = require('events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', () => {
 console.log('an event occurred!');
});
myEmitter.emit('event');
	




Enhancing Node.js performance through clustering.
Node.js applications run on a single processor, which means that by default they don’t take advantage of a multiple-core system. Cluster mode is used to start up multiple node.js processes thereby having multiple instances of the event loop. When we start using cluster in a nodejs app behind the scene multiple node.js processes are created but there is also a parent process called the cluster manager which is responsible for monitoring the health of the individual instances of our application.




What is a thread pool and which library handles it in Node.js
The Thread pool is handled by the libuv library. libuv is a multi-platform C library that provides support for asynchronous I/O-based operations such as file systems, networking, and concurrency.




What is WASI and why is it being introduced?
Web assembly provides an implementation of WebAssembly System Interface specification through WASI API in node.js implemented using WASI class. The introduction of WASI was done by keeping in mind its possible to use the underlying operating system via a collection of POSIX-like functions thus further enabling the application to use resources more efficiently and features that require system-level access.


How to measure the duration of async operations?
Performance API provides us with tools to figure out the necessary performance metrics. A simple example would be using async_hooks and perf_hooks

'use strict';
const async_hooks = require('async_hooks');
const {
 performance,
 PerformanceObserver
} = require('perf_hooks');
const set = new Set();
const hook = async_hooks.createHook({
 init(id, type) {
if (type === 'Timeout') {
  performance.mark(`Timeout-${id}-Init`);
  set.add(id);
}
 },
 destroy(id) {
if (set.has(id)) {
  set.delete(id);
  performance.mark(`Timeout-${id}-Destroy`);
  performance.measure(`Timeout-${id}`,
                      `Timeout-${id}-Init`,
                      `Timeout-${id}-Destroy`);
}
 }
});
hook.enable();
const obs = new PerformanceObserver((list, observer) => {
 console.log(list.getEntries()[0]);
 performance.clearMarks();
 observer.disconnect();
});
obs.observe({ entryTypes: ['measure'], buffered: true });
setTimeout(() => {}, 1000);




How to measure the performance of async operations?
Performance API provides us with tools to figure out the necessary performance metrics. 

A simple example would be:

const { PerformanceObserver, performance } = require('perf_hooks');
const obs = new PerformanceObserver((items) => {
 console.log(items.getEntries()[0].duration);
 performance.clearMarks();
});
obs.observe({ entryTypes: ['measure'] });
performance.measure('Start to Now');
performance.mark('A');
doSomeLongRunningProcess(() => {
 performance.measure('A to Now', 'A');
 performance.mark('B');
 performance.measure('A to B', 'A', 'B');
});





How many Node object methods are available?
18

How to check equality of two nodes?
isEqualNode()






===https://www.simplilearn.com/tutorials/nodejs-tutorial/nodejs-interview-questions=========================================

Node.js is widely used in the following applications:

Real-time chats
Internet of Things
Complex SPAs (Single-Page Applications)
Real-time collaboration tools
Streaming applications
Microservices architecture



Modules are like JavaScript libraries that can be used in a Node.js application to include a set of functions. To include a module in a Node.js application, use the require() function with the parentheses containing the module's name.




Some of the reasons why Node.js is preferred include:

Node.js is very fast
Node Package Manager has over 50,000 bundles available at the developer’s disposal
Perfect for data-intensive, real-time web applications, as Node.js never waits for an API to return data
Better synchronization of code between server and client due to same code base
Easy for web developers to start using Node.js in their projects as it is a JavaScript library



Cons:
Not suitable for heavy computational tasks
Using callback is complex since you end up with several nested callbacks
Dealing with relational databases is not a good option for Node.js


Async series and parallel
inbuilt functionalities
test cases
debugging node --inspect 
routing mechanism
middleware
event emitter


how to manage unhandelled exception?
	process.on('uncaughtException', function(err) {
  
    // Handle the error safely
    console.log(err)
	})
	The above code will be able to handle any sort of unhandled exception which occurs in Node.js.
	 A process is a global object that provides information about the current Node.js process. The process is a listener function that is always listening to the events.
Few events are:

Disconnect
Exit
Message
Multiple Resolves
Unhandled Exception
Rejection Handled
Uncaught Exception
Warning
	
	

difference between npm and yarn
content of package of json
dev dependencies? npm i nodemon --dev
dealing with localizatoin 
authorization? JWT token ncryption algorithm ? default token lifetime

You need to set the --production flag (npm install --production) to avoid installing those development dependencies.
JWT


eval in javascript  ->  eval('x + y + 1'); // returns 42

async error handling
https://www.youtube.com/watch?v=0iiZHlT0boc

express webservice good example
https://github.com/expressjs/express/blob/master/examples/web-service/index.js

higher order function
https://www.youtube.com/watch?v=rRgD1yVwIvE


react code
	usestate
	jwt
	rendering other page

docker
kubernete
collection 
github
oracle


weakmap
waeakset
generator function
delete arr[4]
crypto package
fs
once function
lexical scope
closure
bind method
https://www.tutorialspoint.com/nodejs/nodejs_packaging.htm


everything in javascript is object
let arr=[]
arr.__proto__ = Array.protoype  => extended from array and array is extended from object



WeakMap

Purpose: A WeakMap is a collection of key-value pairs where the keys are weakly referenced, meaning that if there are no other references to the key object, the key-value pair can be garbage collected. This prevents memory leaks in scenarios where you want to associate some data with an object but don’t want to prevent the object from being garbage collected.
Key Features:
	•	Keys must be objects: Unlike a regular Map, where keys can be any value, in a WeakMap, keys must be objects. Primitive data types (like numbers, strings, etc.) are not allowed as keys.
	•	Garbage Collection: If no other references to the key exist, the key-value pair will be removed from the WeakMap by the garbage collector.
	•	No Iteration: You cannot iterate over a WeakMap or get its size because the entries are not enumerable.

```js
const weakMap = new WeakMap();

let obj = { name: "Alice" };
weakMap.set(obj, "Developer");

console.log(weakMap.get(obj)); // Output: Developer

obj = null; // Now obj is eligible for garbage collection

// After garbage collection, the weakMap entry for obj is gone
```

IIFE ->immediatly invoked function expression
	(function (){ 
	// Function Logic Here. 
	})();
	
	create function and add (); in the end to call it immediately


when to use promise and not async await:
	if we need to fetch three data from api.
	if we use async await, then we will have to fetch first data then second and third.
	But using promise.all, we can let all three run parallely, and then return the result.


fs.readfile -callback
const Promise= require('bluebird')
Promise.promisifyAll(fs)  or var readFileAsync = Promise.promisify(fs.readFile)
fs.readfileAsync - promise


Body Parser : 
Install npm install body-parser --save

This how to use body-parser in express:

const express = require('express'),
      app = express(),
      bodyParser = require('body-parser');

// support parsing of application/json type post data
app.use(bodyParser.json());

//support parsing of application/x-www-form-urlencoded post data
app.use(bodyParser.urlencoded({ extended: true }));
Link.

https://github.com/expressjs/body-parser.

And then you can get body and headers in root request object . Example

app.post("/posturl",function(req,res,next){
    console.log(req.body);
    res.send("response");
})



express 4.16+ 
parser is included again
app.use(express.json())
app.use(express.urlencoded({extended: true}));



The Math.floor() function returns the largest integer less than or equal to a given number.

=================Array=====================
array.push(a)
delete arr[4]  - doesnot reduce array size, change element to null
arr.splice(index,number of element to delete,elements to add)
arr.pop() - remove thge last element (size reduce)
arr.shift() - remove frist element (size reduce)
arr.slice()-The slice() method returns the selected elements in an array, as a new array object. does not include the ending index
  var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
  var citrus = fruits.slice(0,3);
array.copyWithin(target, start, end)- The copyWithin() method copies array elements to another position in the array, overwriting the existing values.
array.entries() = The entries() method returns an Array Iterator object with key/value pairs.=([0,banana],[1,apple])
array.every()-The every() method checks if all elements in an array pass a test (provided as a function).
array.fill(value, start, end)-fruits.fill("Kiwi"); -convert every element to kiwi
  
Other methods:
	https://www.w3schools.com/jsref/jsref_slice_array.asp



Use strict
https://www.programiz.com/javascript/use-strict#:~:text=JavaScript%20%22use%20strict%22%201%20Strict%20Mode%20in%20Variable.,Benefits%20of%20Strict%20Mode.%20Was%20this%20article%20helpful%3F



data structure libraries (e.g., Immutable.js)


event bubbling - event propogate from child to parent to grandparent - bubbling up
event capturing -event propogate from grandparent to parent to child - even if we are clicking on child
event trickling - another name for event capturing - trickling down
addEventHandler('click',()=>{},true/false)  -> useCapture is false by default

Event delegation-  since MOST OF EVENTS are bubbled up we can attach listner on parent and take action from there
	document.querySelector(#parent).addEventlistner('click',(e)=>{
		e.target.id - will give us id of exact elememt which was clicked})
		
		

debouncing and throttling
debouncing -  calling an function only if we find pause of some time between events that we are capturing (onKeyUp, onresize etc)
throttling - calling an function only after certain time limit (no matter how many time events has occured) - (like shhoting in game)



Cross-origin resource sharing (CORS) server need to set header to allow cross origin to access resource
Preflight/option request - browser send request to server asking some info- and server respond with additional header.
	may contain Accept-Control-Allow-Origin:* or Allow-Method:POST
	
	
	
This keyword:
	when used in function is the object which owns the function
	when used in object, is the object itself
	outside object or function, referes to global object
	ARROW FUNC:
		this is bound to enclosing scope at creation time and cannot be changed



Session vs localStorage
	cookie can store 4000bytes of data
	session can store atleast 5mb
	session does not need to be go to and fro from server
	cookie needs to be sent
	
	localStorage:
		It is a directly accesible(object of window)
		localStorage.setItem("key",value)
		localStorage.setItem("key",value)
		localStorage.remove("key)
		localStorage.clear()
		To store object	
			localStorage.setItem("key",JSON.stringify(user))
			JSON.parse(localStorage.getItem("key"))
			
			
Hoisting:
javascript load all the variable and function in memory, even before executing the first line
all var are loaded as undefined
while function name(){} is loaded with its definition
var function() or var =()=>{} will be treated as  variable

Temporal deadzone:
	let a=10
	it is a time between 'a' is hoisted and 'a' is initialized
	let hoisted variable in 'script' object not global object. hence it is not available for use unless it is initialized
	uncaught reference error :cannot access a before initialization	
	
Scope:
	var has global scope
	let and const has block scope
	we can redeclare const in lexical lower block
	{const a=10 {const a=100}} shadowing
	illegal shadowing -> we can not redeclare let with var(block to global variable)
	
	
JS ENGINE:
	code -> parsing -AST(Abstract syntax tree)->conpilation->Execution
	parsing - > tolenisation and creating AST
	Complilation -> JIT compliation(combination of interpreter and compiler) it interprete the code line by and compile (optimize) it simultaneously
	Execution -> memory heap, stack 
		garbage collection - Mark ans sweep algo, inlining, copy eligion, inline caching
	
	
	
once and memoize functions

deep and shallow EQUALITY:
	Shallow equality only compare the keys, if value of ny key is object then it will mark it as not equal
	Deep equality means checking the content of nested object also
	https://dmitripavlutin.com/how-to-compare-objects-in-javascript/
	
Loose and Strict equality:
	The loose equality operator ‘==’ allows us to compare two or more operands by converting their value to a common type first and then checking for the equality between them.

	strict equality operator ‘===’ allows us to compare two or more operands by checking the equality between the values as well as their types .
	
	
Escape function
	document.write(escape("Need tips? Visit W3Schools!"));
	Need%20tips%3F%20Visit%20W3Schools%21
	
	
	
Node-oracledb

	npm --add-python-to-path='true' --debug install --global windows-build-tools
	
	npm install instantclient
	
	
TODO:
git

------------------------------------------

app.post('/login', (req, res) => {
	 var key = req.query['api-key'];
	 var value = req.params.name;
    // Get the name to the json body data
    const name = req.body.name;
	if(isPresent){
  
        // The jwt.sign method are used
        // to create token
		//jwt.sign(
   // {data_obeject},
   // "secret_key",
   // {Options}
//		)
        const token = jwt.sign(
            databse[isPresnetIndex],
            'secret'
        );
          
        // Pass the data or token in response
        res.json({
            login: true,
            token: token,
            data: databse[isPresnetIndex]
        });
	})
	
	
	//TO VERIFY
	if(token){
  
        // Verify the token using jwt.verify method
        const decode = jwt.verify(token, 'secret');
  
        //  Return response with decode data
        res.json({
            login: true,
            data: decode
        });

-----------------------------------------------------
axios({
  method: 'post',
  url: '/hi/there?qs1=you&qs2=tube',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});
app.get('/hi/:param1', function(req,res){} );
and given this URL http://www.google.com/hi/there?qs1=you&qs2=tube

You will have:

req.query

{
  qs1: 'you',
  qs2: 'tube'
}
req.params

{
  param1: 'there'
}
req.body{
firstName: 'Fred',
    lastName: 'Flintstone'
}


==========================================================
Switch case
//we cannot pass count in switch. count is number and expression will return boolean, and these two will never match.

const [count,setCount]=useState(0)
switch (true) { 
        case count>0: return 'green';        
        case count<0: return 'red';
        default: return 'white';
    }
